import React, { createContext, useState } from "react";
// React, createContext, useState: You import these from React to create a context and manage state.
import all_product from "../Components/Assets/all_product";
// all_product: You import a list of all products from a separate file. This array likely contains product details such as id, name, price, etc., which you will use in the shopping cart logic.

export const ShopContext =  createContext(null);
// his creates a new context (ShopContext) with an initial value of null. This context will store the state and functions related to the shopping cart.

const getDefaultCart = ()=>{
    let cart = {};
    for (let index = 0; index < all_product.length+1; index++) {
        cart[index] = 0;
    }
    return cart;
}
// This function initializes the cart state. It creates an object (cart) where each key corresponds to a product's ID, and the value is 0 (indicating no quantity of that product is in the cart initially).

const ShopContextProvider = (props) => {

    const [cartItems,setCartItems] = useState(getDefaultCart());
//     cartItems: The state representing the quantities of each product in the cart. Initially, it's set to an object where every product's quantity is 0 (generated by getDefaultCart()).
// setCartItems: A function to update the state of the cart.
    
    
    const addToCart = (itemId) =>{
        setCartItems((prev)=>({...prev,[itemId]:prev[itemId]+1}));
        console.log(cartItems);
    }
//     Purpose: This function adds one unit of a specific product (identified by itemId) to the cart.
// setCartItems: This updates the state by increasing the quantity of the given itemId in cartItems by 1. The ...prev syntax ensures that other cart items remain unchanged.

    const removeFromCart = (itemId) =>{
        setCartItems((prev)=>({...prev,[itemId]:prev[itemId]-1}))
    }
    // : This function decreases the quantity of a product in the cart by 1 (when the user removes it).
    
    const getTotalCartAmount = () => {
        let totalAmount = 0;
        for (const item in cartItems) {
          if (cartItems[item] > 0) {
            let itemInfo = all_product.find((product) => product.id === Number(item));
            totalAmount += cartItems[item] * itemInfo.new_price;
          }
        }
        return totalAmount;
      }
    //   1. getTotalCartAmount: Calculate the total price of all items in the cart
    //   This function loops through cartItems and calculates the total cost of all products in the cart.


      const getTotalCartItems = () =>{
        let totalItem = 0;
        for(const item in cartItems)
        {
            if(cartItems[item]>0)
            {
                totalItem+= cartItems[item];
            }
        }
        return totalItem;
      }
    //   getTotalCartItems: Calculate the total number of items in the cart
//     Purpose: This function calculates the total number of items in the cart.
// Logic: It loops through cartItems and sums up the quantities of all items that have a quantity greater than 0.

    const contextValue = {getTotalCartItems,getTotalCartAmount,all_product,cartItems,addToCart,removeFromCart};
    // contextValue: This object contains all the data (like cartItems, all_product) and functions (addToCart, removeFromCart, getTotalCartAmount, etc.) that will be provided to any components wrapped in ShopContext.Provider.
    return (
        <ShopContext.Provider value={contextValue}>
            {props.children}
        </ShopContext.Provider>
    )
}
// ShopContext.Provider: This is the "provider" that makes the contextValue available to any components that need it.
// {props.children}: This ensures that the co

export default ShopContextProvider;